handleParticle(int x0, int y0, World world) : Flytter partikkelen gjennom vektoren sin:

Bruker en algoritme for å bestemme hvilke plasser i verdenen vektoren går gjennom.
På hver plass, gjør partikkelen en handling.

Før vektorstien skapes, endres hastighetsvektoren seg om den faller.
Eller om den ikke faller, sjekkes plassen under med action(...).

En vektor som dette er bare den korteste linjen mellom to punkter,
og det kan du beskrive i uttrykket: y = ax,     hvor a er en konstant.
Hvis man vet hva a er, kan man finne y ved å iterere gjennom x-verdier
i en for-loop. Men bruken av denne metoden krever at ingen plasser deler
det samme koordinatet langs den aksen man itererer gjennom; bare en
plass kan handles per iterasjon. En løsning for dette, er å iterere
gjennom den lengste aksen.

Algoritmen:
Endre hastighetsvektoren / sjekk plassen under
Definer sluttkoordinater
Definer den største og minste komponenten
Definer helningskonstanten (y = ax  ->  a = y/x)
Iterer gjennom den lengste aksen{
    Regn ut y-en (ax)
    om x-aksen > y-aksen{
        x = i
        y = y-en
    }
    ellers{
        x = y-en
        y = i
    }

    Definer koordinatene til plassen
    Sjekk om plassen er innenfor verdenen
    Gjør en handling

}




midAirCollision(int x0, int y0, int x1, int y1, World world) : Kollisjon i lufta:

Bruker "bevaring" av bevegelsesmengde. For å ungå å bruke for mye ressurser,
estimerer koden hastighetene ved å bruke differansen til massene -> Math.abs(m1 - m2);

Når partikkel-1 har en høyere hastighet enn partikkel-2, betyr det at p-1 kolliderer med p-2,
som betyr at p-1 skal dytte p-2. Den som dytter kommer alltid til å miste hastighet, mens den andre får.

Algoritmen:
Finn ut absoluttverdien av differansen av massene
Finn ut hvilken partikkel som kolliderer med den andre
Regn ut V for den som kolliderer:   v * diff
Regn ut V for den som kollideres i: v + (v * diff)

Eksempel:
m1 = 1,  v11 = 5
m2 = 1,6 v21 = 1

m-diff = 0,6
Siden m1 < m2   ->   m2 får v21 + v21*m-diff  m1 får v11*m-diff
v22 = 1 + 1 * 0,6   =   1,6
v12 = 5 * 0,6       =   3,0